# -*- coding: utf-8 -*-
"""Part(A)_Lab2_1302

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tKcQ4YGeTwaJ9CMmZcU9t07t_7q595Y0

**Q1. (50 points) Develop a game class that:
a) initializes by taking in integers r and c as input, this generates a field of r rows and c columns with a bomb at a randomly chosen row and column,
b) allows the user to play this map by asking users to find the bomb. (Name this method play)**
"""

import numpy as np # for the randoms
import sys # for the sys.exit() part

'''
Basically we need to create an array generated using numpy random function
the array will have r lists of c length
r and c will be determined by the user
we are going to say there is a bomb at whichever points in our list of lists
there is a negative value
if the user chooses a position where there is not a negative, tell them they found a bomb
if the user chooses a position where there is negative, tell them they didn't find a bomb
offer them the option to continue playing

'''

class Game: # create a class to hold the methods required to play the find the bomb game
  def __init__(self, row, col): # initialising method
    self.row = row
    self.col = col
    self.grid = np.random.randn(row,col)
    # print(np.random.randn(row,col)) # just for reference to see what is happening (where negative and non negatives are)

#  def CreateMap(r,c): # trying to create a map to show the minesweeper
 #   board = []
  #  for row in range(r):
   #   board.append(["_"] * c)
    #for element in board:
     # boardd = (" ".join(element))
      #print(boardd)

  def play(self):    # create a method that will get the user to play the game
    print("Pick a row and a column to see if you can find a bomb at that position.")
    # ask the user to pick a row and a column (size of the minesweeper grid), larger the grid the more difficult the game
    x_chose = int(input("Pick a row.\nYou may choose from integers 1:"+str(rows)+".\n"))
    # ask the user to choose an x value
    y_chose = int(input("Pick a column.\nYou may choose from integers 1:"+str(cols)+".\n"))
    # ask the user to choose a y value
    print("You chose the position: ("+str(x_chose)+","+str(y_chose)+").")
    # show the user the coordinate they chose
    if self.grid[x_chose-1][y_chose-1] >= 0:
      # if the position they chose has a non negative value, the user found a bomb
      print("You found a bomb at ("+str(x_chose)+","+str(y_chose)+"). GAME OVER!")
      # if the position they chose has a negative value, they didnt find a bomb, so use recursion to keep playing
    else:
      keep_playing = input("Unlucky. There wasnt a bomb there, do you want to try again? (y/n)")
      # ask if they want to keep playing
      if keep_playing.lower() == 'y':
        # if they input Y or y, doesn't matter
        self.play()
        # keep playing
      elif keep_playing.lower() == 'n':
        # if they input N or n, doesn't matter
        print("You entered n! Thanks for playing!")
        # stop playing, they're done
      else:
        print("You didn't enter 'y' or 'n', guess you don't want to play!")
        # stop playing, they're done
     
print("Welcome to the game 'Find the Bomb'!")
# introduce the game
try:
  # use a try catch to ensure they enter an integer for rows and cols
  rows = int(input("How many rows would you like to play with?\n"))
except ValueError:
  # if they didn't enter an integer, exit the program and tell them why it has broken
  sys.exit("You must enter an integer. Start the program again.")
try:
  cols = int(input("How many columns would you like to play with?\n"))
except ValueError:
  sys.exit("You must enter an integer. Start the program again.")

print("You have chosen to play with", str(rows),"rows and",str(cols),"columns.")
# if they entered two integers, we will get to this point in the program and they will be able to play
play = Game(rows,cols)
# play the game using the rows and columns values they entered
play.play()