# -*- coding: utf-8 -*-
"""1302Assig2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Oh9t0a4p_NjAAMlw54OycD37XnnnJM4d

Q1
"""

import numpy as np
import random

# randomly generating numpy array with 1000 numbers in the shape (100,10)
a = np.zeros((100,10)) 
for i in range(100):
  for j in range(10):
    a[i][j] = random.randint(1,50) # 1 and 50 inclusive

mean = np.mean(a) # calculating the mean 
print(mean) # printing the mean 
median = np.median(a) # calculating the median 
print(median) # printing the median 
max = np.max(a) # calculating the max 
print(max) # printing the max 
std = np.std(a) # calculating the standard deviation 
print(std) # printing the standard deviation 

row_mean = np.mean(a,axis=1) # calculating the row mean 
print(row_mean)  # printing the row mean 
row_median = np.median(a, axis = 1)  # calculating the row median 
print(row_median) # printing the row median 
row_max = np.max(a, axis = 1) # calculating the row max 
print(row_max) # printing the row max 
row_std = np.std(a, axis = 1) # calculating the standard row deviation 
print(row_std) # printing the row standard deviation 


# for cols you would use:
# col_mean = np.mean(a, axis = 0)
# print(col_mean)
# col_median = np.mean(a, axis = 0)
# print(col_median)
# col_max = np.max(a, axis = 0)
# print(col_max)
# col_std = np.std(a, axis = 0)
# print(col_std)

"""Q2"""

import numpy as np 

array = np.random.randint(low=1, high=51, size=(10000,)) 

# generating array which contains 1000 random integers between 1 and 50 
print(array)  # printing the array
print("Printing first 10: \n",array[:10]) # printing the first 10 elements of the array
print("Printing last 10: \n",array[-10:]) # printing the last 10 elements of the array
print("Printing variance: \n",np.var(array)) # printing the variance of the array 
print("Printing difference array: \n",np.diff(array)) # printing the difference array 
print("Printing the sum of the difference array: \n",np.sum(np.diff(array))) # getting the sum of the difference array, method 1
print("Printing the sum of the difference array: \n",array[-1] - array[0]) # getting the sum of the difference array, method 2
sortedArray = np.sort(array) # making the sorted array
print("Printing the sorted array: \n",sortedArray) # printing the sorted array
print("Printing the first 10 elements of the sorted array: \n", sortedArray[:10]) # printing the first 10 elements in the sorted array 
print("Printing the last 10 elements of the sorted array: \n", sortedArray[-10:]) # printing the last 10 elements in the sorted array
print("Printing the variance of the sorted array: \n",np.var(sortedArray)) # printing the variance of the sorted array 
# The variance has not changed, this is because the sorted array contains the same 
# numbers as the unsorted array, just in a different order. Therefore, the mean, max, min, std
# and variance for example will all remain the same. 

col_mean = np.mean(array, axis = 0)
print(col_mean)
col_median = np.median(array, axis = 0)
print(col_median)
col_max = np.max(array, axis = 0)
print(col_max)
col_std = np.std(array, axis = 0)
print(col_std)

# The mean values are very close to 25. This is because of the normal distribution generation
# with a bell shaped curve, with mean centred.

"""Q3"""

import matplotlib.pyplot as plt
import numpy as np

# read the txt file to get the data
f = open('US_population.txt','r')

# getting the populations for each year
populations = np.array([x.split(',') for x in f.read().split('\n')[1:]]) 
print(populations) # printing the populations for each year

# getting the growth of populations for each year
growth = populations[2::2,1].astype('int32')-populations[1::2,1].astype('int32')
print(growth) # printing the growth of populations for each year

# getting the growth rates of populations for each year using np.divide()
growth_rate = np.divide(growth,populations[1::2,1].astype('int32'))
print(growth_rate) # getting the growth rates of populations for each year

# extracting just the years from the dates column
years = np.array([int(x.split('-')[0]) for x in populations[:,0]])
print(years) # printing the years 1950-2100

every_other = years[1::2] # slicing the years column and extracting alternating years
print(every_other) # printing every other year


plt.figure(1) # figure 1 - pt5_1
plt.plot(years[years <= 2020], populations[:,1].astype('int32')[years <= 2020], color = 'g')
plt.plot(years[years > 2020], populations[:,1].astype('int32')[years > 2020], linestyle='--', color='g')
plt.title('US Population') # title of figure
plt.xlabel('Years', fontsize = 15) # label x axis
plt.ylabel('Population', fontsize = 15) # label y axis

plt.figure(2) # figure 1 - pt5_2
plt.plot(every_other[every_other <= 2020], growth_rate[every_other <= 2020], color = 'g')
plt.plot(every_other[every_other > 2020], growth_rate[every_other > 2020], linestyle='--', color='g')
plt.title('US Population') # title of figure
plt.xlabel('Years', fontsize = 15) # label x axis
plt.ylabel('Growth Rate', fontsize = 15) # label y axis